name: iOS Build and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'ios/**'
      - 'src/**'
      - 'capacitor.config.ts'
      - 'package.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.4)'
        required: false

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Sync Capacitor
        run: npx cap sync ios

      - name: Extract version info
        id: version
        run: |
          VERSION=$(grep -oE 'MARKETING_VERSION = [^;]+' ios/App/App.xcodeproj/project.pbxproj | head -1 | sed 's/MARKETING_VERSION = //;s/;//;s/ //g;s/"//g')
          BUILD=$(grep -oE 'CURRENT_PROJECT_VERSION = [^;]+' ios/App/App.xcodeproj/project.pbxproj | head -1 | sed 's/CURRENT_PROJECT_VERSION = //;s/;//;s/ //g;s/"//g')
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          IPA_NAME="BeautyCita-iOS-v${VERSION}-Build${BUILD}-${TIMESTAMP}.ipa"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build=${BUILD}" >> $GITHUB_OUTPUT
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "ipa_name=${IPA_NAME}" >> $GITHUB_OUTPUT

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS app
        run: |
          xcodebuild -workspace ios/App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $RUNNER_TEMP/BeautyCita.xcarchive \
            clean archive

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/BeautyCita.xcarchive \
            -exportPath $RUNNER_TEMP \
            -exportOptionsPlist ios/ExportOptions.plist

          mv $RUNNER_TEMP/App.ipa $RUNNER_TEMP/${{ steps.version.outputs.ipa_name }}

      - name: Upload to Cloudflare R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
        run: |
          brew install awscli

          aws s3 cp "$RUNNER_TEMP/${{ steps.version.outputs.ipa_name }}" \
            "s3://${R2_BUCKET}/downloads/ios/${{ steps.version.outputs.ipa_name }}" \
            --endpoint-url="${R2_ENDPOINT}" \
            --acl public-read

          IPA_SIZE=$(stat -f%z "$RUNNER_TEMP/${{ steps.version.outputs.ipa_name }}")
          IPA_SHA256=$(shasum -a 256 "$RUNNER_TEMP/${{ steps.version.outputs.ipa_name }}" | awk '{print $1}')

          cat > latest.json <<EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "build": "${{ steps.version.outputs.build }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "filename": "${{ steps.version.outputs.ipa_name }}",
            "url": "https://pub-${{ secrets.R2_PUBLIC_ID }}.r2.dev/downloads/ios/${{ steps.version.outputs.ipa_name }}",
            "size": "${IPA_SIZE}",
            "sha256": "${IPA_SHA256}"
          }
          EOF

          aws s3 cp latest.json \
            "s3://${R2_BUCKET}/downloads/ios/latest.json" \
            --endpoint-url="${R2_ENDPOINT}" \
            --acl public-read \
            --content-type application/json

      - name: Trigger frontend rebuild
        env:
          SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$SERVER_SSH_KEY" > ssh_key
          chmod 600 ssh_key

          ssh -i ssh_key -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} \
            "cd /var/www/beautycita.com/frontend && npm run build"

          rm ssh_key

      - name: Create release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}-${{ steps.version.outputs.build }}
          name: BeautyCita iOS v${{ steps.version.outputs.version }} Build ${{ steps.version.outputs.build }}
          body: |
            ## BeautyCita iOS Build

            **Version:** ${{ steps.version.outputs.version }}
            **Build:** ${{ steps.version.outputs.build }}
            **Timestamp:** ${{ steps.version.outputs.timestamp }}

            ### Download
            [Download IPA](https://pub-${{ secrets.R2_PUBLIC_ID }}.r2.dev/downloads/ios/${{ steps.version.outputs.ipa_name }})

            ### Changes
            ${{ github.event.head_commit.message }}

            ---
            Built with GitHub Actions
          files: |
            ${{ runner.temp }}/${{ steps.version.outputs.ipa_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        if: always()
        run: |
          echo "Build Status: ${{ job.status }}"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Build: ${{ steps.version.outputs.build }}"
          echo "IPA: ${{ steps.version.outputs.ipa_name }}"
